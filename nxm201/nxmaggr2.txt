db.orders.insertMany( [
   { _id: 0, name: "Pepperoni", size: "small", price: 19,
     quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
   { _id: 1, name: "Pepperoni", size: "medium", price: 20,
     quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
   { _id: 2, name: "Pepperoni", size: "large", price: 21,
     quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
   { _id: 3, name: "Cheese", size: "small", price: 12,
     quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
   { _id: 4, name: "Cheese", size: "medium", price: 13,
     quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
   { _id: 5, name: "Cheese", size: "large", price: 14,
     quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
   { _id: 6, name: "Vegan", size: "small", price: 17,
     quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
   { _id: 7, name: "Vegan", size: "medium", price: 18,
     quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] )





1. get first 3 pizzass
db.orders.aggregate([{$limit:3}])



2 .sort by price decreasing order
db.orders.aggregate([{$sort:{price:-1}}])


sort by price decreasing order and top 3
db.orders.aggregate([{$sort:{price:-1}},{$limit:3}])




4. Find all the medium sized pizzass with price >15
 db.orders.aggregate([{$match:{price:{$gt:15}}}])
 db.orders.aggregate([{$match:{price:{$gt:15}}},{$match:{size:"medium"}}])
DO WE REALLLY NEED TWO STAGES HERE(no)
do it in same age
 db.orders.aggregate([{$match:{price:{$gt:15},size:"medium"}}])
  db.orders.aggregate([{$match:{size:"medium",price:{$gt:15}}}])






 5. find all cheese pizzaas of medium size
 db.orders.aggregate([{$match:{name:"Cheese",size:"medium"}}])








 $group OPERATOR
1. _id Key:group by that
1.
group pizzas according to the size
db.orders.aggregate([{$group:{_id:"$size"}}])
[ { _id: 'large' }, { _id: 'small' }, { _id: 'medium' } ]



2. group by name
db.orders.aggregate([{$group:{_id:"$name"}}])
[ { _id: 'Pepperoni' }, { _id: 'Cheese' }, { _id: 'Vegan' } ]


3. group all data wrt price and then show greather then 15 price
db.orders.aggregate([{$group:{_id:"$price"}},{$match:{_id:{$gt:15}}}])




4.
get all medium sized pizza and then group by them name
db.orders.aggregate([{$match:{size:"medium"}},{$group:{_id:"$name"}}])




5. we want avg price of each size
avg price of samll pizza 
avg price of medium pizza
avg price of large piza 
db.orders.aggregate([{$group:{_id:"$size",average:{$avg:"$price"}}}])
ans
[
  { _id: 'large', average: 17.5 },
  { _id: 'medium', average: 17 },
  { _id: 'small', average: 16 }
]







6. we want to group by name and find the avg of names
db.orders.aggregate([{$group:{_id:"$name",average:{$avg:"$price"}}}])



7. find the total number of vegan only pizzas
db.orders.aggregate([{$group:{_id:"$name",quant:{$sum:"$quantity"}}},{$match:{_id:"Vegan"}}])
db.orders.aggregate([{$match:{name:"Vegan"}},{$group:{_id:"$name",total:{$sum:"$quantity"}}}])



8. 
group the pizzas with name having more quantiy at the  2
db.orders.aggregate([{$group:{_id:"$name",total:{$sum:"$quantity"}}},{$sort:{total:-1}},{$limit:2}])



we can use aggregation to filter data , to group data, sort data, limit data
analyse data, project data





db.zips.aggregate([{$group:{_id:"$state},total_pop:{$sum:"$pop"}}}])




































