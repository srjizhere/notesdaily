Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const Lectures
Assignments
Quizzes
Tickets
Discussions
Notifications
Messages
Electives
Announcements
Courses
Suraj Patil (fp06_118)
Bookmark
Download
Express Middlewares & Ecosystem CODING LIVE
NIHAL (24 NOV, 22 - 9:00 PM)
Details
Discussions
LECTURE VIDEO

NOTES
   Middleware : 
  something in middle of something

  is just a function -> runs once the req is made, but before the response is sent
                     -> has access to the request object, the response object, and has the next function


1. custom middlewares; - logger, timeLogger etc
2. express inbuilt middlewares; - express.json(), express.text(), express.Router()
                  /students
3. community middleware - cors, multer
               //cors -> cross origin, resource sharing


const express = require("express")
const fs = require("fs")
const cors = require("cors")

const {studentRouter} = require("./routes/student.route")

const app = express()

app.use(express.json())
app.use(express.text())

app.use(cors({
    origin : "*",
}))


app.use("/students", studentRouter)

app.get("/", (req, res) => {
    console.log(req.body)
    res.send("Welcome")
})




app.listen(7640, () => {
    console.log("Listening on PORT 7640")
})


// var timeLogger = (req, res, next) => {
//     const startTime = new Date().getTime() 
//     next()
//     const endTime = new Date().getTime()
//     console.log(endTime-startTime)
// }

// var logger = (req, res, next) => {
//     const log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}log = "\n"+req.method + " " + req.url
//     fs.appendFileSync("./logs.txt",log,"utf-8")
//     next()
// }

// app.use(timeLogger,logger)
const express = require("express")

const studentRouter = express.Router()

studentRouter.get("/", (req, res) => {
    res.send({"data" : "all students"})
})

studentRouter.get("/web20", (req, res) => {
    res.send("Web 20 students")
})


module.exports =  {
    studentRouter
}